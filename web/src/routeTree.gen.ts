/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as AuthenticatedUserTagsRouteImport } from './routes/_authenticated/user-tags'
import { Route as AuthenticatedTemplatesRouteImport } from './routes/_authenticated/templates'
import { Route as AuthenticatedScheduledPushRouteImport } from './routes/_authenticated/scheduled-push'
import { Route as AuthenticatedPushRouteImport } from './routes/_authenticated/push'
import { Route as AuthenticatedDevicesRouteImport } from './routes/_authenticated/devices'
import { Route as AuthenticatedDeviceGroupsRouteImport } from './routes/_authenticated/device-groups'
import { Route as AuthenticatedConfigRouteImport } from './routes/_authenticated/config'
import { Route as AuthenticatedAuditLogsRouteImport } from './routes/_authenticated/audit-logs'
import { Route as errors503RouteImport } from './routes/(errors)/503'
import { Route as errors500RouteImport } from './routes/(errors)/500'
import { Route as errors404RouteImport } from './routes/(errors)/404'
import { Route as errors403RouteImport } from './routes/(errors)/403'
import { Route as errors401RouteImport } from './routes/(errors)/401'
import { Route as authSignUpRouteImport } from './routes/(auth)/sign-up'
import { Route as authSignInRouteImport } from './routes/(auth)/sign-in'
import { Route as authForgotPasswordRouteImport } from './routes/(auth)/forgot-password'
import { Route as AuthenticatedSettingsRouteRouteImport } from './routes/_authenticated/settings/route'
import { Route as AuthenticatedSettingsIndexRouteImport } from './routes/_authenticated/settings/index'
import { Route as AuthenticatedPushIndexRouteImport } from './routes/_authenticated/push/index'
import { Route as AuthenticatedAppsIndexRouteImport } from './routes/_authenticated/apps/index'
import { Route as AuthenticatedSettingsProfileRouteImport } from './routes/_authenticated/settings/profile'
import { Route as AuthenticatedSettingsAppearanceRouteImport } from './routes/_authenticated/settings/appearance'
import { Route as AuthenticatedSettingsAccountRouteImport } from './routes/_authenticated/settings/account'
import { Route as AuthenticatedPushStatisticsRouteImport } from './routes/_authenticated/push/statistics'
import { Route as AuthenticatedPushSendRouteImport } from './routes/_authenticated/push/send'
import { Route as AuthenticatedPushLogsRouteImport } from './routes/_authenticated/push/logs'
import { Route as AuthenticatedErrorsErrorRouteImport } from './routes/_authenticated/errors/$error'

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedUserTagsRoute = AuthenticatedUserTagsRouteImport.update({
  id: '/user-tags',
  path: '/user-tags',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedTemplatesRoute = AuthenticatedTemplatesRouteImport.update({
  id: '/templates',
  path: '/templates',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedScheduledPushRoute =
  AuthenticatedScheduledPushRouteImport.update({
    id: '/scheduled-push',
    path: '/scheduled-push',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedPushRoute = AuthenticatedPushRouteImport.update({
  id: '/push',
  path: '/push',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedDevicesRoute = AuthenticatedDevicesRouteImport.update({
  id: '/devices',
  path: '/devices',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedDeviceGroupsRoute =
  AuthenticatedDeviceGroupsRouteImport.update({
    id: '/device-groups',
    path: '/device-groups',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedConfigRoute = AuthenticatedConfigRouteImport.update({
  id: '/config',
  path: '/config',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedAuditLogsRoute = AuthenticatedAuditLogsRouteImport.update({
  id: '/audit-logs',
  path: '/audit-logs',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const errors503Route = errors503RouteImport.update({
  id: '/(errors)/503',
  path: '/503',
  getParentRoute: () => rootRouteImport,
} as any)
const errors500Route = errors500RouteImport.update({
  id: '/(errors)/500',
  path: '/500',
  getParentRoute: () => rootRouteImport,
} as any)
const errors404Route = errors404RouteImport.update({
  id: '/(errors)/404',
  path: '/404',
  getParentRoute: () => rootRouteImport,
} as any)
const errors403Route = errors403RouteImport.update({
  id: '/(errors)/403',
  path: '/403',
  getParentRoute: () => rootRouteImport,
} as any)
const errors401Route = errors401RouteImport.update({
  id: '/(errors)/401',
  path: '/401',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignUpRoute = authSignUpRouteImport.update({
  id: '/(auth)/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignInRoute = authSignInRouteImport.update({
  id: '/(auth)/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const authForgotPasswordRoute = authForgotPasswordRouteImport.update({
  id: '/(auth)/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedSettingsRouteRoute =
  AuthenticatedSettingsRouteRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedSettingsIndexRoute =
  AuthenticatedSettingsIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedSettingsRouteRoute,
  } as any)
const AuthenticatedPushIndexRoute = AuthenticatedPushIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedPushRoute,
} as any)
const AuthenticatedAppsIndexRoute = AuthenticatedAppsIndexRouteImport.update({
  id: '/apps/',
  path: '/apps/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedSettingsProfileRoute =
  AuthenticatedSettingsProfileRouteImport.update({
    id: '/profile',
    path: '/profile',
    getParentRoute: () => AuthenticatedSettingsRouteRoute,
  } as any)
const AuthenticatedSettingsAppearanceRoute =
  AuthenticatedSettingsAppearanceRouteImport.update({
    id: '/appearance',
    path: '/appearance',
    getParentRoute: () => AuthenticatedSettingsRouteRoute,
  } as any)
const AuthenticatedSettingsAccountRoute =
  AuthenticatedSettingsAccountRouteImport.update({
    id: '/account',
    path: '/account',
    getParentRoute: () => AuthenticatedSettingsRouteRoute,
  } as any)
const AuthenticatedPushStatisticsRoute =
  AuthenticatedPushStatisticsRouteImport.update({
    id: '/statistics',
    path: '/statistics',
    getParentRoute: () => AuthenticatedPushRoute,
  } as any)
const AuthenticatedPushSendRoute = AuthenticatedPushSendRouteImport.update({
  id: '/send',
  path: '/send',
  getParentRoute: () => AuthenticatedPushRoute,
} as any)
const AuthenticatedPushLogsRoute = AuthenticatedPushLogsRouteImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => AuthenticatedPushRoute,
} as any)
const AuthenticatedErrorsErrorRoute =
  AuthenticatedErrorsErrorRouteImport.update({
    id: '/errors/$error',
    path: '/errors/$error',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/settings': typeof AuthenticatedSettingsRouteRouteWithChildren
  '/forgot-password': typeof authForgotPasswordRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/audit-logs': typeof AuthenticatedAuditLogsRoute
  '/config': typeof AuthenticatedConfigRoute
  '/device-groups': typeof AuthenticatedDeviceGroupsRoute
  '/devices': typeof AuthenticatedDevicesRoute
  '/push': typeof AuthenticatedPushRouteWithChildren
  '/scheduled-push': typeof AuthenticatedScheduledPushRoute
  '/templates': typeof AuthenticatedTemplatesRoute
  '/user-tags': typeof AuthenticatedUserTagsRoute
  '/': typeof AuthenticatedIndexRoute
  '/errors/$error': typeof AuthenticatedErrorsErrorRoute
  '/push/logs': typeof AuthenticatedPushLogsRoute
  '/push/send': typeof AuthenticatedPushSendRoute
  '/push/statistics': typeof AuthenticatedPushStatisticsRoute
  '/settings/account': typeof AuthenticatedSettingsAccountRoute
  '/settings/appearance': typeof AuthenticatedSettingsAppearanceRoute
  '/settings/profile': typeof AuthenticatedSettingsProfileRoute
  '/apps': typeof AuthenticatedAppsIndexRoute
  '/push/': typeof AuthenticatedPushIndexRoute
  '/settings/': typeof AuthenticatedSettingsIndexRoute
}
export interface FileRoutesByTo {
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/audit-logs': typeof AuthenticatedAuditLogsRoute
  '/config': typeof AuthenticatedConfigRoute
  '/device-groups': typeof AuthenticatedDeviceGroupsRoute
  '/devices': typeof AuthenticatedDevicesRoute
  '/scheduled-push': typeof AuthenticatedScheduledPushRoute
  '/templates': typeof AuthenticatedTemplatesRoute
  '/user-tags': typeof AuthenticatedUserTagsRoute
  '/': typeof AuthenticatedIndexRoute
  '/errors/$error': typeof AuthenticatedErrorsErrorRoute
  '/push/logs': typeof AuthenticatedPushLogsRoute
  '/push/send': typeof AuthenticatedPushSendRoute
  '/push/statistics': typeof AuthenticatedPushStatisticsRoute
  '/settings/account': typeof AuthenticatedSettingsAccountRoute
  '/settings/appearance': typeof AuthenticatedSettingsAppearanceRoute
  '/settings/profile': typeof AuthenticatedSettingsProfileRoute
  '/apps': typeof AuthenticatedAppsIndexRoute
  '/push': typeof AuthenticatedPushIndexRoute
  '/settings': typeof AuthenticatedSettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/_authenticated/settings': typeof AuthenticatedSettingsRouteRouteWithChildren
  '/(auth)/forgot-password': typeof authForgotPasswordRoute
  '/(auth)/sign-in': typeof authSignInRoute
  '/(auth)/sign-up': typeof authSignUpRoute
  '/(errors)/401': typeof errors401Route
  '/(errors)/403': typeof errors403Route
  '/(errors)/404': typeof errors404Route
  '/(errors)/500': typeof errors500Route
  '/(errors)/503': typeof errors503Route
  '/_authenticated/audit-logs': typeof AuthenticatedAuditLogsRoute
  '/_authenticated/config': typeof AuthenticatedConfigRoute
  '/_authenticated/device-groups': typeof AuthenticatedDeviceGroupsRoute
  '/_authenticated/devices': typeof AuthenticatedDevicesRoute
  '/_authenticated/push': typeof AuthenticatedPushRouteWithChildren
  '/_authenticated/scheduled-push': typeof AuthenticatedScheduledPushRoute
  '/_authenticated/templates': typeof AuthenticatedTemplatesRoute
  '/_authenticated/user-tags': typeof AuthenticatedUserTagsRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/errors/$error': typeof AuthenticatedErrorsErrorRoute
  '/_authenticated/push/logs': typeof AuthenticatedPushLogsRoute
  '/_authenticated/push/send': typeof AuthenticatedPushSendRoute
  '/_authenticated/push/statistics': typeof AuthenticatedPushStatisticsRoute
  '/_authenticated/settings/account': typeof AuthenticatedSettingsAccountRoute
  '/_authenticated/settings/appearance': typeof AuthenticatedSettingsAppearanceRoute
  '/_authenticated/settings/profile': typeof AuthenticatedSettingsProfileRoute
  '/_authenticated/apps/': typeof AuthenticatedAppsIndexRoute
  '/_authenticated/push/': typeof AuthenticatedPushIndexRoute
  '/_authenticated/settings/': typeof AuthenticatedSettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/privacy'
    | '/terms'
    | '/settings'
    | '/forgot-password'
    | '/sign-in'
    | '/sign-up'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/audit-logs'
    | '/config'
    | '/device-groups'
    | '/devices'
    | '/push'
    | '/scheduled-push'
    | '/templates'
    | '/user-tags'
    | '/'
    | '/errors/$error'
    | '/push/logs'
    | '/push/send'
    | '/push/statistics'
    | '/settings/account'
    | '/settings/appearance'
    | '/settings/profile'
    | '/apps'
    | '/push/'
    | '/settings/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/privacy'
    | '/terms'
    | '/forgot-password'
    | '/sign-in'
    | '/sign-up'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/audit-logs'
    | '/config'
    | '/device-groups'
    | '/devices'
    | '/scheduled-push'
    | '/templates'
    | '/user-tags'
    | '/'
    | '/errors/$error'
    | '/push/logs'
    | '/push/send'
    | '/push/statistics'
    | '/settings/account'
    | '/settings/appearance'
    | '/settings/profile'
    | '/apps'
    | '/push'
    | '/settings'
  id:
    | '__root__'
    | '/_authenticated'
    | '/privacy'
    | '/terms'
    | '/_authenticated/settings'
    | '/(auth)/forgot-password'
    | '/(auth)/sign-in'
    | '/(auth)/sign-up'
    | '/(errors)/401'
    | '/(errors)/403'
    | '/(errors)/404'
    | '/(errors)/500'
    | '/(errors)/503'
    | '/_authenticated/audit-logs'
    | '/_authenticated/config'
    | '/_authenticated/device-groups'
    | '/_authenticated/devices'
    | '/_authenticated/push'
    | '/_authenticated/scheduled-push'
    | '/_authenticated/templates'
    | '/_authenticated/user-tags'
    | '/_authenticated/'
    | '/_authenticated/errors/$error'
    | '/_authenticated/push/logs'
    | '/_authenticated/push/send'
    | '/_authenticated/push/statistics'
    | '/_authenticated/settings/account'
    | '/_authenticated/settings/appearance'
    | '/_authenticated/settings/profile'
    | '/_authenticated/apps/'
    | '/_authenticated/push/'
    | '/_authenticated/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  PrivacyRoute: typeof PrivacyRoute
  TermsRoute: typeof TermsRoute
  authForgotPasswordRoute: typeof authForgotPasswordRoute
  authSignInRoute: typeof authSignInRoute
  authSignUpRoute: typeof authSignUpRoute
  errors401Route: typeof errors401Route
  errors403Route: typeof errors403Route
  errors404Route: typeof errors404Route
  errors500Route: typeof errors500Route
  errors503Route: typeof errors503Route
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/user-tags': {
      id: '/_authenticated/user-tags'
      path: '/user-tags'
      fullPath: '/user-tags'
      preLoaderRoute: typeof AuthenticatedUserTagsRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/templates': {
      id: '/_authenticated/templates'
      path: '/templates'
      fullPath: '/templates'
      preLoaderRoute: typeof AuthenticatedTemplatesRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/scheduled-push': {
      id: '/_authenticated/scheduled-push'
      path: '/scheduled-push'
      fullPath: '/scheduled-push'
      preLoaderRoute: typeof AuthenticatedScheduledPushRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/push': {
      id: '/_authenticated/push'
      path: '/push'
      fullPath: '/push'
      preLoaderRoute: typeof AuthenticatedPushRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/devices': {
      id: '/_authenticated/devices'
      path: '/devices'
      fullPath: '/devices'
      preLoaderRoute: typeof AuthenticatedDevicesRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/device-groups': {
      id: '/_authenticated/device-groups'
      path: '/device-groups'
      fullPath: '/device-groups'
      preLoaderRoute: typeof AuthenticatedDeviceGroupsRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/config': {
      id: '/_authenticated/config'
      path: '/config'
      fullPath: '/config'
      preLoaderRoute: typeof AuthenticatedConfigRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/audit-logs': {
      id: '/_authenticated/audit-logs'
      path: '/audit-logs'
      fullPath: '/audit-logs'
      preLoaderRoute: typeof AuthenticatedAuditLogsRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/(errors)/503': {
      id: '/(errors)/503'
      path: '/503'
      fullPath: '/503'
      preLoaderRoute: typeof errors503RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/500': {
      id: '/(errors)/500'
      path: '/500'
      fullPath: '/500'
      preLoaderRoute: typeof errors500RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/404': {
      id: '/(errors)/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof errors404RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/403': {
      id: '/(errors)/403'
      path: '/403'
      fullPath: '/403'
      preLoaderRoute: typeof errors403RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/401': {
      id: '/(errors)/401'
      path: '/401'
      fullPath: '/401'
      preLoaderRoute: typeof errors401RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/sign-up': {
      id: '/(auth)/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authSignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedSettingsRouteRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/settings/': {
      id: '/_authenticated/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof AuthenticatedSettingsIndexRouteImport
      parentRoute: typeof AuthenticatedSettingsRouteRoute
    }
    '/_authenticated/push/': {
      id: '/_authenticated/push/'
      path: '/'
      fullPath: '/push/'
      preLoaderRoute: typeof AuthenticatedPushIndexRouteImport
      parentRoute: typeof AuthenticatedPushRoute
    }
    '/_authenticated/apps/': {
      id: '/_authenticated/apps/'
      path: '/apps'
      fullPath: '/apps'
      preLoaderRoute: typeof AuthenticatedAppsIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/settings/profile': {
      id: '/_authenticated/settings/profile'
      path: '/profile'
      fullPath: '/settings/profile'
      preLoaderRoute: typeof AuthenticatedSettingsProfileRouteImport
      parentRoute: typeof AuthenticatedSettingsRouteRoute
    }
    '/_authenticated/settings/appearance': {
      id: '/_authenticated/settings/appearance'
      path: '/appearance'
      fullPath: '/settings/appearance'
      preLoaderRoute: typeof AuthenticatedSettingsAppearanceRouteImport
      parentRoute: typeof AuthenticatedSettingsRouteRoute
    }
    '/_authenticated/settings/account': {
      id: '/_authenticated/settings/account'
      path: '/account'
      fullPath: '/settings/account'
      preLoaderRoute: typeof AuthenticatedSettingsAccountRouteImport
      parentRoute: typeof AuthenticatedSettingsRouteRoute
    }
    '/_authenticated/push/statistics': {
      id: '/_authenticated/push/statistics'
      path: '/statistics'
      fullPath: '/push/statistics'
      preLoaderRoute: typeof AuthenticatedPushStatisticsRouteImport
      parentRoute: typeof AuthenticatedPushRoute
    }
    '/_authenticated/push/send': {
      id: '/_authenticated/push/send'
      path: '/send'
      fullPath: '/push/send'
      preLoaderRoute: typeof AuthenticatedPushSendRouteImport
      parentRoute: typeof AuthenticatedPushRoute
    }
    '/_authenticated/push/logs': {
      id: '/_authenticated/push/logs'
      path: '/logs'
      fullPath: '/push/logs'
      preLoaderRoute: typeof AuthenticatedPushLogsRouteImport
      parentRoute: typeof AuthenticatedPushRoute
    }
    '/_authenticated/errors/$error': {
      id: '/_authenticated/errors/$error'
      path: '/errors/$error'
      fullPath: '/errors/$error'
      preLoaderRoute: typeof AuthenticatedErrorsErrorRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
  }
}

interface AuthenticatedSettingsRouteRouteChildren {
  AuthenticatedSettingsAccountRoute: typeof AuthenticatedSettingsAccountRoute
  AuthenticatedSettingsAppearanceRoute: typeof AuthenticatedSettingsAppearanceRoute
  AuthenticatedSettingsProfileRoute: typeof AuthenticatedSettingsProfileRoute
  AuthenticatedSettingsIndexRoute: typeof AuthenticatedSettingsIndexRoute
}

const AuthenticatedSettingsRouteRouteChildren: AuthenticatedSettingsRouteRouteChildren =
  {
    AuthenticatedSettingsAccountRoute: AuthenticatedSettingsAccountRoute,
    AuthenticatedSettingsAppearanceRoute: AuthenticatedSettingsAppearanceRoute,
    AuthenticatedSettingsProfileRoute: AuthenticatedSettingsProfileRoute,
    AuthenticatedSettingsIndexRoute: AuthenticatedSettingsIndexRoute,
  }

const AuthenticatedSettingsRouteRouteWithChildren =
  AuthenticatedSettingsRouteRoute._addFileChildren(
    AuthenticatedSettingsRouteRouteChildren,
  )

interface AuthenticatedPushRouteChildren {
  AuthenticatedPushLogsRoute: typeof AuthenticatedPushLogsRoute
  AuthenticatedPushSendRoute: typeof AuthenticatedPushSendRoute
  AuthenticatedPushStatisticsRoute: typeof AuthenticatedPushStatisticsRoute
  AuthenticatedPushIndexRoute: typeof AuthenticatedPushIndexRoute
}

const AuthenticatedPushRouteChildren: AuthenticatedPushRouteChildren = {
  AuthenticatedPushLogsRoute: AuthenticatedPushLogsRoute,
  AuthenticatedPushSendRoute: AuthenticatedPushSendRoute,
  AuthenticatedPushStatisticsRoute: AuthenticatedPushStatisticsRoute,
  AuthenticatedPushIndexRoute: AuthenticatedPushIndexRoute,
}

const AuthenticatedPushRouteWithChildren =
  AuthenticatedPushRoute._addFileChildren(AuthenticatedPushRouteChildren)

interface AuthenticatedRouteRouteChildren {
  AuthenticatedSettingsRouteRoute: typeof AuthenticatedSettingsRouteRouteWithChildren
  AuthenticatedAuditLogsRoute: typeof AuthenticatedAuditLogsRoute
  AuthenticatedConfigRoute: typeof AuthenticatedConfigRoute
  AuthenticatedDeviceGroupsRoute: typeof AuthenticatedDeviceGroupsRoute
  AuthenticatedDevicesRoute: typeof AuthenticatedDevicesRoute
  AuthenticatedPushRoute: typeof AuthenticatedPushRouteWithChildren
  AuthenticatedScheduledPushRoute: typeof AuthenticatedScheduledPushRoute
  AuthenticatedTemplatesRoute: typeof AuthenticatedTemplatesRoute
  AuthenticatedUserTagsRoute: typeof AuthenticatedUserTagsRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedErrorsErrorRoute: typeof AuthenticatedErrorsErrorRoute
  AuthenticatedAppsIndexRoute: typeof AuthenticatedAppsIndexRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedSettingsRouteRoute: AuthenticatedSettingsRouteRouteWithChildren,
  AuthenticatedAuditLogsRoute: AuthenticatedAuditLogsRoute,
  AuthenticatedConfigRoute: AuthenticatedConfigRoute,
  AuthenticatedDeviceGroupsRoute: AuthenticatedDeviceGroupsRoute,
  AuthenticatedDevicesRoute: AuthenticatedDevicesRoute,
  AuthenticatedPushRoute: AuthenticatedPushRouteWithChildren,
  AuthenticatedScheduledPushRoute: AuthenticatedScheduledPushRoute,
  AuthenticatedTemplatesRoute: AuthenticatedTemplatesRoute,
  AuthenticatedUserTagsRoute: AuthenticatedUserTagsRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedErrorsErrorRoute: AuthenticatedErrorsErrorRoute,
  AuthenticatedAppsIndexRoute: AuthenticatedAppsIndexRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  PrivacyRoute: PrivacyRoute,
  TermsRoute: TermsRoute,
  authForgotPasswordRoute: authForgotPasswordRoute,
  authSignInRoute: authSignInRoute,
  authSignUpRoute: authSignUpRoute,
  errors401Route: errors401Route,
  errors403Route: errors403Route,
  errors404Route: errors404Route,
  errors500Route: errors500Route,
  errors503Route: errors503Route,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
