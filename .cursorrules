# DooPush Platform - Cursor Rules

## 项目概述
推送平台项目，采用前后端分离架构：
- 前端 (web/): Vite + React + TypeScript + shadcn-admin + Tailwind CSS
- 后端 (api/): Go + Gin + GORM + MySQL + Cobra + Viper
- 数据结构: 用户 -> 应用 -> 推送 (三层架构)

## 项目结构
```
doopush/
├── web/                    # 前端管理平台 (shadcn-admin)
│   ├── src/
│   │   ├── components/    # UI组件
│   │   ├── features/      # 功能模块
│   │   ├── routes/        # 页面路由
│   │   ├── services/      # API服务调用
│   │   ├── types/         # TypeScript类型定义
│   │   ├── stores/        # 状态管理
│   │   ├── hooks/         # 自定义Hooks
│   │   └── utils/         # 工具函数
│   ├── public/            # 静态资源
│   └── ...                # Vite配置文件
├── sdk/                   # 移动端SDK服务
│   ├── ios/
│   └── android/
├── api/                   # 后端API服务
│   ├── cmd/               # 命令行入口 (Cobra)
│   │   ├── root.go        # 根命令配置
│   │   └── serve.go       # API服务器命令
│   ├── internal/          # 内部包
│   │   ├── controllers/   # 控制器层
│   │   ├── services/      # 业务逻辑层
│   │   ├── models/        # 数据模型
│   │   ├── middleware/    # 中间件
│   │   ├── config/        # 配置管理 (Viper)
│   │   ├── database/      # 数据库连接
│   │   └── push/          # 推送服务集成
│   ├── pkg/               # 公共包
│   │   ├── utils/         # 工具函数
│   │   ├── logger/        # 日志包
│   │   └── response/      # 统一响应格式
│   ├── docs/              # Swagger生成的文档
│   ├── go.mod            # Go模块定义
│   └── main.go           # 应用入口
├── .env                   # 环境变量配置
├── docker-compose.yml     # 数据库服务
└── Makefile              # 全项目构建脚本
```

## 核心开发规范

### 前端开发规范 (web/)

**框架和库使用：**
- 使用 Vite + React + TypeScript 架构
- 基于 shadcn-admin 模板进行定制开发
- 严格使用 TypeScript，绝对避免 'any' 类型
- 优先使用 shadcn/ui 组件库构建UI
- 使用 Tailwind CSS 进行样式设计，避免自定义CSS类名
- 使用 TanStack Router 进行页面路由管理
- 使用 Axios 作为统一的HTTP客户端

**组件开发规范：**
- 基于 shadcn-admin 的布局系统进行开发
- 功能模块放在 features/ 目录下，按业务分组
- 确认操作统一使用 Dialog 组件，不使用原生 alert 或 confirm
- 组件文件命名使用 kebab-case (如: user-management.tsx)
- 优先使用函数组件和 React Hooks
- 使用 TanStack Router 的文件路由系统

**网络请求规范：**
- 统一使用 Axios 进行HTTP请求
- 配置请求拦截器处理认证token
- 配置响应拦截器处理错误和401自动跳转
- API服务放在 services/ 目录下
- 使用 TypeScript 定义请求和响应类型

**错误处理：**
- 根据HTTP状态码执行不同处理策略
- 401错误自动跳转到登录页面
- 错误信息使用用户友好的中文提示
- 统一的错误Toast提示组件

**状态管理：**
- 使用 Zustand 或 Context API 管理全局状态
- 应用切换状态必须正确管理
- 用户认证状态持久化
- 利用 shadcn-admin 内置的状态管理模式

### 后端开发规范 (api/)

**架构设计：**
- 使用 Cobra 框架管理简单命令行启动
- 使用 Viper 从 .env 文件加载配置
- 使用 Gin 框架构建RESTful API
- 采用分层架构：Controller -> Service -> Model
- 使用 GORM 进行数据库操作
- 中间件统一处理认证、日志、CORS等

**数据库规范：**
- 严格遵循 用户->应用->推送 的分层数据结构
- 所有数据操作必须按应用隔离
- 使用外键约束维护数据完整性
- 数据模型使用 GORM 标签定义

**API设计规范：**
- 遵循 RESTful API 设计原则
- URL路径体现层次关系: /api/v1/apps/:appId/devices
- 统一的响应格式和错误处理
- 支持JWT和API Key双重认证机制
- 必须编写完整的 Swagger 注释，包含参数、响应、错误码说明

**错误处理：**
- 使用统一的错误响应格式
- HTTP状态码标准化使用
- 详细的错误日志记录
- 错误码和消息的国际化支持

**Swagger文档规范：**
- 每个API接口必须包含完整的 Swagger 注释
- 注释包含：Summary、Description、Tags、参数说明、响应示例
- 数据模型必须定义 example 和 binding 标签
- 使用 swag init 命令生成文档，访问 /swagger 路径查看

### 通用开发规范

**代码质量：**
- 所有函数和类型必须有清晰的命名
- 复杂逻辑必须添加注释说明
- 避免硬编码，使用配置文件或常量
- 代码格式化使用项目配置的prettier/gofmt

**Git提交规范：**
- feat: 新功能
- fix: 错误修复  
- docs: 文档更新
- style: 代码格式化
- refactor: 代码重构
- test: 测试相关
- chore: 构建/工具相关

**安全规范：**
- 敏感信息使用环境变量
- API接口必须进行权限验证
- 数据传输使用HTTPS
- 密码和密钥加密存储

## 数据层次架构实现要求

### 用户层级 (User Level)
- 用户只能访问被授权的应用
- 支持用户-应用的多对多权限关系
- 用户权限：owner, developer, viewer

### 应用层级 (App Level)  
- 每个应用拥有独立的API密钥
- 应用间数据完全隔离
- 应用配置独立管理 (iOS证书、Android厂商密钥等)

### 推送层级 (Push Level)
- 所有推送操作必须在特定应用上下文中进行
- 设备token与应用强关联
- 推送统计按应用维度统计

## 关键实现要求

### 应用上下文管理
- 前端必须维护当前选中的应用状态
- 所有API请求必须包含应用ID参数
- 后端必须验证用户对指定应用的权限

### 数据隔离
- 数据库查询必须包含应用ID过滤条件
- 不同应用的数据严格隔离，不能交叉访问
- 删除应用时级联删除所有关联数据

### API接口规范
- 所有应用相关的API路径包含 :appId 参数
- 统一的错误响应格式
- 支持分页、排序、筛选的标准化参数

## 推送服务特定要求

### iOS推送 (APNs)
- 支持生产和开发环境证书配置
- 实现静默推送 (content-available)
- 错误处理和token失效管理

### Android推送
- 支持多厂商通道: FCM, 华为HMS, 小米, OPPO, VIVO, 荣耀, 三星
- 根据设备厂商自动路由到对应通道
- 统一的消息格式适配

### 批量推送
- 支持按平台和厂商分组处理
- 异步处理机制和状态跟踪
- 详细的推送结果统计

## 界面设计要求

### 布局规范
- 使用 shadcn-admin 模板作为基础
- 左侧导航 + 右侧全宽内容区域
- 顶部包含应用选择器和用户信息

### 交互规范  
- 表格支持排序、筛选、分页
- 表单验证提供实时反馈
- 加载状态和错误状态友好提示

### 组件使用
- 按钮: Button组件，统一样式和状态
- 表单: Form组件，内置验证和错误提示
- 表格: DataTable组件，支持排序筛选
- 对话框: 统一使用 Dialog 组件进行确认和交互
- 通知: Toast组件，统一消息提示

## 开发时注意事项

1. **数据访问**: 所有数据操作必须考虑应用隔离
2. **权限验证**: 每个操作都要验证用户对应用的权限
3. **错误处理**: 统一使用项目定义的错误处理机制
4. **类型安全**: 前后端都要定义清晰的数据类型
5. **API文档**: 每个接口必须编写完整的 Swagger 注释
6. **测试**: 关键功能必须包含单元测试和集成测试
7. **日志**: 重要操作必须记录详细日志
8. **性能**: 考虑大量设备和推送的性能优化
9. **安全**: 敏感数据加密，API接口权限控制

## 禁止事项

❌ 不要使用 'any' 类型
❌ 不要跨应用访问数据
❌ 不要硬编码敏感信息
❌ 不要忽略错误处理
❌ 不要破坏数据层次结构
❌ 不要使用自定义CSS类名
❌ 不要使用原生 alert、confirm，统一使用 Dialog 组件
❌ 不要创建没有 Swagger 注释的 API 接口

## 优先级顺序

1. 数据安全和隔离性
2. 用户体验和界面一致性  
3. 代码质量和类型安全
4. 性能和可扩展性
5. 文档和测试完整性

遵循以上规范，确保项目的高质量和一致性。
